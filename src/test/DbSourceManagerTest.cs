using NUnit.Framework;

namespace Codentia.Common.Data.Test
{
    /// <summary>
    /// Unit Testing framework for DbSourceManager class
    /// </summary>
    [TestFixture]
    public class DbSourceManagerTest
    {
        /// <summary>
        /// Prepare for testing
        /// </summary>
        [TestFixtureSetUp]
        public void TestFixtureSetUp()
        {
            // this is to ensure we cover the extra bits in the resx file - to avoid coverage 
            // issues on 'system' stuff (since we can't exclude it as its autogenerated)
            ConnectionStringFormat csf = new ConnectionStringFormat();
            ConnectionStringFormat.Culture = ConnectionStringFormat.Culture;
            Assert.That(ConnectionStringFormat.Culture, Is.EqualTo(ConnectionStringFormat.Culture));
        }

        /// <summary>
        /// Scenario: Called AddDatabaseSource with invalid parameters
        /// Expected: Correct exceptions are raised
        /// </summary>
        [Test]
        public void _001_AddDatabaseSource_InvalidParams()
        {
            Assert.That(delegate { DbSourceManager.AddDatabaseSource(string.Empty, string.Empty); }, Throws.Exception.With.Message.EqualTo("dataSourceName was not specified"));
            Assert.That(delegate { DbSourceManager.AddDatabaseSource(null, string.Empty); }, Throws.Exception.With.Message.EqualTo("dataSourceName was not specified"));
            Assert.That(delegate { DbSourceManager.AddDatabaseSource("testdb", string.Empty); }, Throws.Exception.With.Message.EqualTo("databaseSourceXml was not specified"));
            Assert.That(delegate { DbSourceManager.AddDatabaseSource("testdb", null); }, Throws.Exception.With.Message.EqualTo("databaseSourceXml was not specified"));
        }

        /// <summary>
        /// Scenario: Called AddDatabaseSource with valid parameters - (not recreate)
        /// Expected: DataSource Added
        /// </summary>
        [Test]
        public void _002_AddDatabaseSource_Add_NoRecreate()
        {
            string testXml = GetTestDatabaseSourceXml("mydb", true);
            string dsName = "mydsname";

            Assert.That(DbManager.Instance.DatabaseSourceExists(dsName), Is.False);

            DbSourceManager.AddDatabaseSource(dsName, testXml);

            Assert.That(DbManager.Instance.DatabaseSourceExists(dsName), Is.True);

            DbManager.Instance.RemoveDatabaseSource(dsName);
        }

        /// <summary>
        /// Scenario: Called AddDatabaseSource with valid parameters - (with recreate)
        /// Expected: DataSource Added, then added again
        /// </summary>
        [Test]
        public void _003_AddDatabaseSource_Add_Recreate()
        {
            string testXml = GetTestDatabaseSourceXml("mydb", true);
            string dsName = "mydsname";
            Assert.That(DbManager.Instance.DatabaseSourceExists(dsName), Is.False);
            DbSourceManager.AddDatabaseSource(dsName, testXml);
            Assert.That(DbManager.Instance.DatabaseSourceExists(dsName), Is.True);
            DbSourceManager.AddDatabaseSource(dsName, testXml, true);
        }

        /// <summary>
        /// Scenario: Called ConvertConnectionStringToRowsetString with invalid parameters
        /// Expected: Correct exceptions are raised
        /// </summary>
        [Test]
        public void _004_ConvertConnectionStringToRowsetString_InvalidParams()
        {
            string db;
            Assert.That(delegate { DbSourceManager.ConvertDatabaseSourceXmlToRowsetString(string.Empty, out db); }, Throws.Exception.With.Message.EqualTo("databaseSourceXml was not specified"));
            Assert.That(delegate { DbSourceManager.ConvertDatabaseSourceXmlToRowsetString(null, out db); }, Throws.Exception.With.Message.EqualTo("databaseSourceXml was not specified"));
        }

        /// <summary>
        /// Scenario: Called ConvertDatabaseSourceXmlToRowsetString with valid parameters including an instance
        /// Expected: Correct rowset string returned
        /// </summary>
        [Test]
        public void _005_ConvertDatabaseSourceXmlToRowsetString_WithInstance()
        {
            string db;
            string testXml = GetTestDatabaseSourceXml("mydb", true);
            string rowSetString = DbSourceManager.ConvertDatabaseSourceXmlToRowsetString(testXml, out db);
            Assert.That(db, Is.EqualTo("mydb"));
            Assert.That(rowSetString, Is.EqualTo("SERVER=MyServer\\blah;UID=sa;PWD=abc"));
        }

        /// <summary>
        /// Scenario: Called ConvertDatabaseSourceXmlToRowsetString with valid parameters without an instance
        /// Expected: Correct rowset string returned
        /// </summary>
        [Test]
        public void _006_ConvertDatabaseSourceXmlToRowsetString_WithoutInstance()
        {
            string db;
            string testXml = GetTestDatabaseSourceXml("mydb", false);
            string rowSetString = DbSourceManager.ConvertDatabaseSourceXmlToRowsetString(testXml, out db);
            Assert.That(db, Is.EqualTo("mydb"));
            Assert.That(rowSetString, Is.EqualTo("SERVER=MyServer;UID=sa;PWD=abc"));
        }

        /// <summary>
        /// Get Test Database SourceXml
        /// </summary>
        /// <param name="dbName">db Name</param>
        /// <param name="withInstance">does server have an instance</param>
        /// <returns>string of sourceXml</returns>
        private static string GetTestDatabaseSourceXml(string dbName, bool withInstance)
        {
            string server = "MyServer";
            string pword = "abc";
            string instance = string.Empty;
            if (withInstance)
            {
                instance = "blah";
            }

            if (!string.IsNullOrEmpty(instance))
            {
                string sourceTemplate = "<add runat=\"{0}\" server=\"{0}\" database=\"{1}\" user=\"sa\" password=\"{2}\" instance=\"{3}\"  />";
                return string.Format(sourceTemplate, server, dbName, pword, instance);
            }
            else
            {
                string sourceTemplate = "<add runat=\"{0}\" server=\"{0}\" database=\"{1}\" user=\"sa\" password=\"{2}\" />";
                return string.Format(sourceTemplate, server, dbName, pword);
            }
        }
    }
}